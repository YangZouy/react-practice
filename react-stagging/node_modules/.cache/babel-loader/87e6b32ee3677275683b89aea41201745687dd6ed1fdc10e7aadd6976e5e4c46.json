{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-stagging\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Footer from './components/Footer/Footer';\nimport Header from './components/Header/Header';\nimport List from './components/List/List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [{\n        id: '001',\n        name: '吃饭',\n        done: true\n      }, {\n        id: '002',\n        name: '睡觉',\n        done: false\n      }, {\n        id: '003',\n        name: '打代码',\n        done: true\n      }]\n    };\n    // 通过props传递过去函数，子组件调用函数后父组件拿到函数中的参数\n    this.addTodo = todoObj => {\n      // 这里的todoObj就是代办事项对象\n      const todos = this.state.todos;\n      // 将新的数据添加到所有数据中\n      const todoObjs = [todoObj, ...todos];\n      // 修改原来的数据\n      this.setState({\n        todos: todoObjs\n      });\n      // 输入完成之后需要将输入框清空\n    };\n    // 这里实现的是修改todo的状态\n    this.updateTodo = (id, done) => {\n      // 这里类似是孙传祖的隔代传递 依旧使用自定义函数的形式 在子组件中调用这样的函数即可\n      // 先获取到原来的代办列表\n      const todos = this.state.todos;\n      // 然后循环遍历 与id值符合的进行比较\n      const newTodos = todos.map(todo => {\n        if (todo.id === id) return {\n          ...todo,\n          done\n        };else return todo;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n    // 删除某条todo\n    this.deleteTodo = id => {\n      const todos = this.state.todos;\n      const newTodos = todos.filter(todo => {\n        return todo.id !== id;\n      });\n      // console.log(id)\n      // 更改状态\n      this.setState({\n        todos: newTodos\n      });\n    };\n    // 最后的checkedAll的操作 就是点击了最后的 上面所有的都要选择 否则所有的都不选择\n    this.checkTodo = done => {\n      const todos = this.state.todos;\n      const newTodos = todos.map(todo => {\n        return {\n          ...todo,\n          done\n        };\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          addTodo: this.addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          todos: this.state,\n          updateTodo: this.updateTodo,\n          deleteTodo: this.deleteTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          todos: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Footer","Header","List","jsxDEV","_jsxDEV","App","constructor","args","state","todos","id","name","done","addTodo","todoObj","todoObjs","setState","updateTodo","newTodos","map","todo","deleteTodo","filter","checkTodo","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/react-stagging/src/App.js"],"sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport Footer from './components/Footer/Footer'\nimport Header  from './components/Header/Header'\nimport List from './components/List/List'\n\nexport default class App extends Component {\n  state = {todos:[\n    {id: '001', name: '吃饭', done: true},\n    {id: '002', name: '睡觉', done: false},\n    {id: '003', name: '打代码', done: true}\n  ]}\n  \n  // 通过props传递过去函数，子组件调用函数后父组件拿到函数中的参数\n  addTodo = (todoObj) => {\n    // 这里的todoObj就是代办事项对象\n    const todos = this.state.todos;\n    // 将新的数据添加到所有数据中\n    const todoObjs = [todoObj,...todos]\n    // 修改原来的数据\n    this.setState({todos: todoObjs});\n    // 输入完成之后需要将输入框清空\n  }\n\n  // 这里实现的是修改todo的状态\n  updateTodo = (id,done) => {\n    // 这里类似是孙传祖的隔代传递 依旧使用自定义函数的形式 在子组件中调用这样的函数即可\n    // 先获取到原来的代办列表\n    const todos = this.state.todos;\n    // 然后循环遍历 与id值符合的进行比较\n    const newTodos = todos.map( (todo) => {\n      if(todo.id === id) return {...todo,done}\n      else return todo\n    })\n\n    this.setState({todos: newTodos})\n  }\n\n  // 删除某条todo\n  deleteTodo = (id) => {\n    const todos = this.state.todos\n    const newTodos = todos.filter((todo) => {\n      return todo.id !== id\n    })\n    // console.log(id)\n    // 更改状态\n    this.setState({todos: newTodos})\n  }\n\n  // 最后的checkedAll的操作 就是点击了最后的 上面所有的都要选择 否则所有的都不选择\n  checkTodo = (done) => {\n    const todos = this.state.todos\n    const newTodos = todos.map((todo) => {\n      return {...todo,done}\n    })\n    this.setState({todos: newTodos})\n  }\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <div className=\"todo-wrap\">\n          <Header addTodo={this.addTodo}/>\n          <List todos={this.state} updateTodo={this.updateTodo} deleteTodo = {this.deleteTodo}/>\n          <Footer todos={this.state}  />\n        </div>\n      </div>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}