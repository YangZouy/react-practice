{"ast":null,"code":"// 推荐使用这种形式的初始化 便于后期的代码维护\n\nimport { DECREMENT, INCREMENT } from \"./constant\";\n\n// 只需要修改initState即可\nconst initState = 0;\n// reducer 执行传过来的action动作 完成之后将store中的数据修改之后的值传回去\n// 这里的preState其实就是需要的count值\nexport default function count_reducer(preState = initState, action) {\n  const {\n    type,\n    data\n  } = action;\n  // console.log(data)\n\n  switch (type) {\n    case INCREMENT:\n      return preState + data;\n    case DECREMENT:\n      return preState - data;\n    // 注意 reducer里面不能做非常复杂的事情 \n    // 故异步或者判断等逻辑需要放到别的地方\n    default:\n      // 这里其实就是对prestate进行一些初始化的内容\n      // 因为前面已经使用了默认参数值的方式 故直接返回参数即可\n      return preState;\n  }\n}","map":{"version":3,"names":["DECREMENT","INCREMENT","initState","count_reducer","preState","action","type","data"],"sources":["D:/react-practice/redux-practice/src/redux/count_reducers.js"],"sourcesContent":["// 推荐使用这种形式的初始化 便于后期的代码维护\r\n\r\nimport { DECREMENT, INCREMENT } from \"./constant\";\r\n\r\n// 只需要修改initState即可\r\nconst initState = 0;\r\n// reducer 执行传过来的action动作 完成之后将store中的数据修改之后的值传回去\r\n// 这里的preState其实就是需要的count值\r\nexport default function count_reducer(preState=initState,action) {\r\n  const {type, data} = action\r\n  // console.log(data)\r\n\r\n  switch(type) {\r\n    case INCREMENT:\r\n      return preState + data;\r\n    case DECREMENT:\r\n      return preState - data;\r\n    // 注意 reducer里面不能做非常复杂的事情 \r\n    // 故异步或者判断等逻辑需要放到别的地方\r\n    default:\r\n      // 这里其实就是对prestate进行一些初始化的内容\r\n      // 因为前面已经使用了默认参数值的方式 故直接返回参数即可\r\n      return preState;\r\n  }\r\n}"],"mappings":"AAAA;;AAEA,SAASA,SAAS,EAAEC,SAAS,QAAQ,YAAY;;AAEjD;AACA,MAAMC,SAAS,GAAG,CAAC;AACnB;AACA;AACA,eAAe,SAASC,aAAaA,CAACC,QAAQ,GAACF,SAAS,EAACG,MAAM,EAAE;EAC/D,MAAM;IAACC,IAAI;IAAEC;EAAI,CAAC,GAAGF,MAAM;EAC3B;;EAEA,QAAOC,IAAI;IACT,KAAKL,SAAS;MACZ,OAAOG,QAAQ,GAAGG,IAAI;IACxB,KAAKP,SAAS;MACZ,OAAOI,QAAQ,GAAGG,IAAI;IACxB;IACA;IACA;MACE;MACA;MACA,OAAOH,QAAQ;EACnB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}